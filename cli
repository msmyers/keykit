#!/usr/bin/env bash
# This script was generated by bashly 0.8.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# vpnkit:inject_libs:
source "/Volumes/Central/Projects/msmyers/keykit/lib/import.sh" || exit 2

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n"
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cli_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli - Sample application\n"
    echo

  else
    printf "cli - Sample application\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli [command]\n"
  printf "  cli [command] --help | -h\n"
  printf "  cli --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  exec_bin     "
  echo "  exec_bind    "
  echo "  keycart      "
  echo "  ovpn_run     "
  echo "  build_ovpn   "
  echo "  edit         "
  echo "  env          "
  echo "  provision    "
  echo "  pki          "
  echo "  volume       "
  echo "  cat          "
  echo "  ls           list files"
  echo "  tar          tar files"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
cli_exec_bin_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli exec_bin\n"
    echo

  else
    printf "cli exec_bin\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli exec_bin\n"
  printf "  cli exec_bin --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_exec_bind_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli exec_bind\n"
    echo

  else
    printf "cli exec_bind\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli exec_bind\n"
  printf "  cli exec_bind --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_keycart_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli keycart\n"
    echo

  else
    printf "cli keycart\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli keycart\n"
  printf "  cli keycart --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_ovpn_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli ovpn_run\n"
    echo

  else
    printf "cli ovpn_run\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli ovpn_run [COMMAND]\n"
  printf "  cli ovpn_run --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  COMMAND"
    printf "\n"
    echo

  fi
}

# :command.usage
cli_build_ovpn_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli build_ovpn\n"
    echo

  else
    printf "cli build_ovpn\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli build_ovpn [CLIENT]\n"
  printf "  cli build_ovpn --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  CLIENT"
    printf "\n"
    echo

  fi
}

# :command.usage
cli_edit_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli edit\n"
    echo

  else
    printf "cli edit\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli edit [COMMAND]\n"
  printf "  cli edit --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  COMMAND"
    printf "\n"
    echo

  fi
}

# :command.usage
cli_env_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli env\n"
    echo

  else
    printf "cli env\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli env [OVPNID]\n"
  printf "  cli env --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  OVPNID"
    printf "\n"
    echo

  fi
}

# :command.usage
cli_provision_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli provision\n"
    echo

  else
    printf "cli provision\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli provision CN [options]\n"
  printf "  cli provision --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --nopass"
    printf "\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  CN"
    printf "\n"
    echo

  fi
}

# :command.usage
cli_pki_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli pki\n"
    echo

  else
    printf "cli pki\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli pki [command]\n"
  printf "  cli pki [command] --help | -h\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  regen   "
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_pki_regen_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli pki regen\n"
    echo

  else
    printf "cli pki regen\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli pki regen\n"
  printf "  cli pki regen --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_volume_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli volume\n"
    echo

  else
    printf "cli volume\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli volume [command]\n"
  printf "  cli volume [command] --help | -h\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  destroy   "
  echo "  create    "
  echo "  ensure    "
  echo "  inspect   "
  echo "  export    "
  echo "  import    "
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_volume_destroy_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli volume destroy\n"
    echo

  else
    printf "cli volume destroy\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli volume destroy\n"
  printf "  cli volume destroy --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_volume_create_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli volume create\n"
    echo

  else
    printf "cli volume create\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli volume create\n"
  printf "  cli volume create --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_volume_ensure_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli volume ensure\n"
    echo

  else
    printf "cli volume ensure\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli volume ensure\n"
  printf "  cli volume ensure --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_volume_inspect_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli volume inspect\n"
    echo

  else
    printf "cli volume inspect\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli volume inspect\n"
  printf "  cli volume inspect --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_volume_export_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli volume export\n"
    echo

  else
    printf "cli volume export\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli volume export\n"
  printf "  cli volume export --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_volume_import_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli volume import\n"
    echo

  else
    printf "cli volume import\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli volume import\n"
  printf "  cli volume import --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_cat_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli cat\n"
    echo

  else
    printf "cli cat\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli cat [PATH]\n"
  printf "  cli cat --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  PATH"
    printf "    Path to file\n"
    echo

  fi
}

# :command.usage
cli_ls_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli ls - list files\n"
    echo

  else
    printf "cli ls - list files\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli ls [PATH]\n"
  printf "  cli ls --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  PATH"
    printf "    Path to file\n"
    echo

  fi
}

# :command.usage
cli_tar_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli tar - tar files\n"
    echo

  else
    printf "cli tar - tar files\n"
    echo

  fi

  printf "Usage:\n"
  printf "  cli tar CN\n"
  printf "  cli tar --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  CN"
    printf "\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
cli_exec_bin_command() {
  # src/exec_bin_command.sh
  echo "# this file is located in 'src/exec_bin_command.sh'"
  echo "# code for 'cli exec_bin' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

  ovpn_run ovpn_copy_server_files
}

# :command.function
cli_exec_bind_command() {
  # src/exec_bind_command.sh
  #echo "# this file is located in 'src/exec_bind_command.sh'"
  #echo "# code for 'cli exec_bind' goes here"
  #echo "# you can edit it freely and regenerate (it will not be overwritten)"
  #inspect_args

  home="$CWD"

  echo "source $home/link.sh"

  before() {
    clean() {
      rm -rf "$home/.keykit-data"
    }

    clean
  }

  once() {
    mkdir "$home/.keykit-data/disk.tar"
  }

  main() {

    KIT_keykit_shelf_cart="$home/.keykit-shelf/cart"
    KIT_keykit_shelf_conf="$home/.keykit-shelf/conf"
    KIT_keykit_shelf_disk="$home/.keykit-shelf/disk"
    KIT_keykit_shelf_ovpn="$home/.keykit-shelf/ovpn"

    KIT_keykit_shelf_ovpn="$home/.keykit-disk/data/"
    KIT_keykit_shelf_ovpn="$home/.keykit-disk/disk.tar"

    ln -s -f "$home/.keykit-ovpn" "$home/.keycart"
    ln -s -f "$home/.keykit-conf/openvpn/server" "$home/.keycart"
    ln -s -f "$home/.keykit-disk/openvpn/server" "$home/.keycart"

    exec "$home/link.sh"

  }
}

# :command.function
cli_keycart_command() {
  # src/keycart_command.sh
  #echo "# this file is located in 'src/keycart_command.sh'"
  #echo "# code for 'cli keycart' goes here"
  #echo "# you can edit it freely and regenerate (it will not be overwritten)"
  #inspect_args

  home="$CWD"

  keydisk="keykit-data"

  keycart() {
      echo "$home/keykit-data/openvpn"
  }

  #keykit() {
  #    echo ""
  #}

  col_var() {
    col_echo "$(UI.Color.Red)" "$(col_bold "$@")"
  #  col_echo "$(UI.Color.Red)" "$@"
  }

  col_bold() {
    col_echo "$(UI.Color.Bold)" "$@"
  }

  col_val() {
    col_echo "$(UI.Color.White)" "$@"
  #  col_echo "$(UI.Color.Default)" "$@"
  }

  col_echo() {
    echo "$1$2$(UI.Color.Default)"
  }

  col_disk() {
    col_echo "$(UI.Color.Blue)" "$@"
  }

  kv_echo() {
    printf "%-31s: %s\n" "$(col_var "$1")" "$(col_val "$2")"
  }

  echo """
  $(kv_echo "keykit" "$keykit")
  $(kv_echo "home" "$home")

  $(kv_echo "keycart_int" "$(col_disk "$KIT_disk_basename"):$(keycart_int )")
  $(kv_echo "keycart_ext" "$(col_disk "\$home"):/$(rel_dir "$(keycart_ext )")")
  """

  #[$(docker volume inspect "$KIT_disk_basename" &>/dev/null && echo volume-exists || echo volume-absent)]

  #tree -C -a "$home/keykit-data/openvpn/clients"
}

# :command.function
cli_ovpn_run_command() {
  # src/ovpn_run_command.sh
  echo "# this file is located in 'src/ovpn_run_command.sh'"
  echo "# code for 'cli ovpn_run' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

  ovpn_run "$@"
}

# :command.function
cli_build_ovpn_command() {
  # src/build_ovpn_command.sh
  #!/usr/bin/env bash

  home="$CWD"

  home=$(keykit_home "$CWD")

  client="${args['client']}"

  # "keycart"
  #   * int: /etc/openvpn
  #   * ext: ./keykit-data/openvpn
  keycart() {
    keycart_ext "$@" #  "$home/keykit-data/openvpn/$1"
  }

  search="$(keycart clients/*)"
  template="$home/client-template.ovpn"

  post_ops() {
    true #  chown "$OWN" "$ME"
  }

  first() {
    # TODO: spin up the disk
    echo "first"
  }

  finally() {
    # TODO: close out the disk
    echo "finally"
  }

  once() {
    echo "template=\$( less $(rel_dir "$template") )"
    echo "===="
  }

  main() {
    ME="$(keycart "clients/$client.ovpn")"

    keys="clients/$client"

    printf "%s %-15s\n" "$client" "$(rel_dir "$ME")"

    (cat "$template" >"$ME") && (post_ops "$ME")

    add "ca" \
      "$(kat "$keys/ca.crt")"

    add "tls-auth" \
      "$(kat "$keys/ta.key")"

    add "key" \
      "$(kat "pki/private/$client.key")"

    add "cert" \
      "$(kat "pki/issued/$client.crt")"
  }

  function add() {
    echo -e "<$1>\n$2\n</$1>" >>"$ME"
  }


  first

  once

  if [[ ! "$client" ]]; then
    for f in $search; do
      if [ -d "$f" ]; then
        client="$(basename "$f")"
  #      client="$(grealpath --logical --no-symlinks "$f" --relative-to "$keycart/clients")"
        main
      fi
    done
  else
    main
  fi

  # TODO: how do we ensure it runs?
  finally
}

# :command.function
cli_edit_command() {
  # src/edit_command.sh
  echo "# this file is located in 'src/edit_command.sh'"
  echo "# code for 'cli edit' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

  # edit rules
  spec() {
    vim src/bashly.yml
  }

  edit() {
   vim "src/${file}_command.sh"
  }

  reload() {
    /bin/bash -c "$kit --version"
  }

  file="${args[command]}"

  spec && reload

  [[ $file ]] || return

  edit && reload
}

# :command.function
cli_env_command() {
  # src/env_command.sh
  # to "activate" an environment, we create a bench

  #echo "$pwd"
  #echo "env_command"

  namespace keykit

  Log "KIT_KIT: $KIT_KIT"
  Log "KIT_LIB: $KIT_LIB"
  Log "KIT_DIR: $KIT_DIR"
  Log "KIT_CWD: $KIT_CWD"

  Log "OVPN_ID: $OVPN_ID"

  if [[ ! "${args[ovpnid]}" ]]; then
    return
  fi

  Log "activating ${args[ovpnid]}"

  # step 1: wipe/replace disk
  # step 2: identify correct folder
  # step 3:

  echo "export OVPN_ID=\"${args[ovpnid]}\""
}

# :command.function
cli_provision_command() {
  # src/provision_command.sh
  namespace "keykit"

  home="$CWD"

  client="${args[cn]}"
  nopass=$( [[ "${args['--nopass']}" -eq 1 ]] && echo "nopass" )

  keycart_ext() {
    echo "$home/key"
  }

  keycart_int() {
    echo "/etc/openvpn"
  }

  #keycart() {
  #  keycart_in "$@"
  #}

  OUT_ZIP="$(keycart_ext "$client-keys.tar")"

  #ovpn_run easyrsa build-client-full "$arg_CN" "$arg_PW" || true

  Log "easyrsa build-client-full $client $nopass"
  ovpn_client_keygen "$client" "$nopass"

  exec_gen() {
    Log "ovpn_getcliecli_build_ovpn_commandnt $arg_CN separated > $(keycart_int "clients/$client")"
    ovpn_run ovpn_getclient "$client" separated || true
  }

  exec_pull() {
    Log "tar > $OUT_ZIP" # TODO: understand why zips cant be made across function boundaries
    docker run -v "$OVPN_DATA:/etc/openvpn" --rm "busybox" tar -cvf - -C "$(keycart_int clients/*)" "$client" > "$(keycart_ext "$client.tar")"
    #docker run -v "$OVPN_DATA:/etc/openvpn" --rm "busybox" tar -cvf - -C /etc/openvpn "clients/$arg_CN" > "$(to_bench "arg_CN.tar")"
  }

  # THIS IS FULL EXPORT OF /clients: --> docker run -v "$OVPN_DATA:/etc/openvpn" --rm "busybox" tar -cvf - -C /etc/openvpn clients > "$OUT_ZIP"
  #docker run -v "$OVPN_DATA:/etc/openvpn" --rm "busybox" tar -cvf - -C /etc/openvpn clients | xz > "$OUT_ZIP"
  tar -x -f "$OUT_ZIP" -C "$OUT_DIR"

  ovpn_run ovpn_getclient "$client" > "$(keycart_ext "OUT_DIR/$client.ovpn")" || true
  #ovpn_run ovpn_getclient "$client" > "$OUT_DIR/$client.ovpn" || true

  # WORKED: tar -x -f ./evo-vpn_users.vpn.evoeco.com/awd2-separated.tar.gz -C ./evo-vpn_users.vpn.evoeco.com

  #docker_run tar -cvf - -C /etc/openvpn/clients "$arg_CN" | xz > "OUT_ZIP"
  #docker run -v "$OVPN_DATA":/etc/openvpn --rm kylemanna/openvpn tar -cvf - -C /etc/openvpn/clients "$arg_CN" | xz > "$OUT_ZIP"

  #docker_tar "$arg_CN" | xz > "$OUT_ZIP"
  #docker_run tar -cvf - -C /etc/openvpn/clients "$arg_CN" | xz > "$OUT_ZIP"
  #docker_run tar -cvf - -C /etc/openvpn/clients "$arg_CN" | xz > "$OUT_ZIP"

  Log "tree \"$OUT_DIR\""
  tree "$OUT_DIR"

  # ignore error removing existing file.
  #rm "$ZIP_NAME" || true
  #Log "$OUT_DIR > $OUT_ZIP"
  #docker_tar "$arg_CN" | xz > "$OUT_ZIP"
  #docker_zip "$arg_CN" | xz > "$ZIP_NAME"
  #docker_run tar -cvf - -C /etc/openvpn/clients "$arg_CN" | xz > "$ZIP_NAME"
  #docker_zip "$arg_CN"

  #echo "test"

  #docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn tar -cvf - -C /etc/openvpn/clients "$arg_CN" | xz > "$ZIP_NAME"
  #docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn tar -cvf - -C /etc/openvpn/clients "$arg_CN" | xz > "$ZIP_NAME"
}

# :command.function
cli_pki_regen_command() {
  # src/pki_regen_command.sh
  cli_volume_destroy_command || true
  cli_volume_create_command

  # step1: force caller to have ovpn_env.sh
  #assert_var "$OVPN_ID" "OVPN_ID"

  OVPN_ID="users.east"
  OVPN_CA_CN="$OVPN_ID.vpn.evoeco.com"

  echo "OVPN_CA_CN: $OVPN_CA_CN"

  ovpn_run ovpn_genconfig -u "$OVPN_CA_CN"

  # TODO: this must go into ovpn_env.sh
  #export EASYRSA_REQ_CN="$OVPN_CA_CN"

  ovpn_run ovpn_initpki nopass
}

# :command.function
cli_volume_destroy_command() {
  # src/volume_destroy_command.sh
  namespace evo-vpn

  # TODO: ask: #Log "rm? $OVPN_DATA"

  Log "docker volume rm $OVPN_DATA"

  docker volume rm "$OVPN_DATA"
}

# :command.function
cli_volume_create_command() {
  # src/volume_create_command.sh
  docker volume create --name "$OVPN_DATA"
}

# :command.function
cli_volume_ensure_command() {
  # src/volume_ensure_command.sh

  # TODO: fill this out with real checks

  cli_volume_create_command "$@"
}

# :command.function
cli_volume_inspect_command() {
  # src/volume_inspect_command.sh
  docker inspect "$OVPN_DATA"
}

# :command.function
cli_volume_export_command() {
  # src/volume_export_command.sh
  keycart_tar="$KIT_cart_vol_ext_tar"
  keycart_dir="$KIT_cart_vol_int_dir"

  kdata_tar() {
    xz > "$(kdata_ref "$1")"
  }

  before() {
    ovpn_run ovpn_copy_server_files
  }

  kdock_tar() {
    helpers_docker_run_stdout_tar "$1"
  }

  kdock_tar "$keycart_dir" | kdata_tar "$keycart_tar"
}

# :command.function
cli_volume_import_command() {
  # src/volume_import_command.sh
  # see: https://github.com/kylemanna/docker-openvpn/blob/master/docs/backup.md
  set -e

  home=$(kit_at "$CWD")

  keycart_tar="$(kdata_ref "$KIT_cart_vol_ext_tar")"
  keycart_dir="$(kcart_ref "$KIT_cart_vol_int_dir")"

  if [ ! -f "$keycart_tar" ]; then
    throw "must exist: $keycart_tar"
  fi

  main() {
    kdata_untar "$keycart_tar" | kdock_untar "$keycart_dir"
  }

  main
}

# :command.function
cli_cat_command() {
  # src/cat_command.sh
  arg_PATH="${args['path']}"

  ovpn_run cat "${args[path]}"
}

# :command.function
cli_ls_command() {
  # src/ls_command.sh
  #set +e

  arg_PATH="${args['path']}"

  #docker_run "ls -alh $arg_PATH"
  ovpn_run "ls -alh $arg_PATH"
}

# :command.function
cli_tar_command() {
  # src/tar_command.sh
  #echo "# this file is located in 'src/tar_command.sh'"
  #echo "# code for 'cli tar' goes here"
  #echo "# you can edit it freely and regenerate (it will not be overwritten)"
  #inspect_args

  client="${args[cn]}"

  docker_tar "$client" "$(to_bench "$client.tar")"
  #docker_tar "clients/$client" | xz > "$OUT_ZIP.tar.gz"

  #docker_run /bin/bash -c "cd /etc/openvpn; $*"

  #tar -x -f "$OUT_ZIP.tar.gz"
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    cli_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  exec_bin )
    action="exec_bin"
    shift
    cli_exec_bin_parse_requirements "$@"
    shift $#
    ;;

  exec_bind )
    action="exec_bind"
    shift
    cli_exec_bind_parse_requirements "$@"
    shift $#
    ;;

  keycart )
    action="keycart"
    shift
    cli_keycart_parse_requirements "$@"
    shift $#
    ;;

  ovpn_run )
    action="ovpn_run"
    shift
    cli_ovpn_run_parse_requirements "$@"
    shift $#
    ;;

  build_ovpn )
    action="build_ovpn"
    shift
    cli_build_ovpn_parse_requirements "$@"
    shift $#
    ;;

  edit )
    action="edit"
    shift
    cli_edit_parse_requirements "$@"
    shift $#
    ;;

  env )
    action="env"
    shift
    cli_env_parse_requirements "$@"
    shift $#
    ;;

  provision )
    action="provision"
    shift
    cli_provision_parse_requirements "$@"
    shift $#
    ;;

  pki )
    action="pki"
    shift
    cli_pki_parse_requirements "$@"
    shift $#
    ;;

  volume )
    action="volume"
    shift
    cli_volume_parse_requirements "$@"
    shift $#
    ;;

  cat )
    action="cat"
    shift
    cli_cat_parse_requirements "$@"
    shift $#
    ;;

  ls )
    action="ls"
    shift
    cli_ls_parse_requirements "$@"
    shift $#
    ;;

  tar )
    action="tar"
    shift
    cli_tar_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  * )
    cli_usage
    exit 1
    ;;

  esac
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_exec_bin_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_exec_bin_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="exec_bin"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_exec_bind_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_exec_bind_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="exec_bind"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_keycart_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_keycart_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="keycart"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_ovpn_run_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_ovpn_run_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="ovpn_run"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[command]+x} ]]; then
        # :argument.validations
        args[command]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_build_ovpn_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_build_ovpn_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="build_ovpn"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[client]+x} ]]; then
        # :argument.validations
        args[client]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_edit_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_edit_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="edit"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[command]+x} ]]; then
        # :argument.validations
        args[command]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_env_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_env_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="env"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[ovpnid]+x} ]]; then
        # :argument.validations
        args[ovpnid]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_provision_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_provision_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="provision"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --nopass )
      # :flag.conflicts
      # :flag.case_no_arg
      args[--nopass]=1
      shift
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[cn]+x} ]]; then
        # :argument.validations
        args[cn]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[cn]+x} ]]; then
    printf "missing required argument: CN\nusage: cli provision CN [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_pki_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_pki_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  regen )
    action="regen"
    shift
    cli_pki_regen_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  * )
    cli_pki_usage
    exit 1
    ;;

  esac
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_pki_regen_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_pki_regen_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="pki regen"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_volume_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_volume_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  destroy )
    action="destroy"
    shift
    cli_volume_destroy_parse_requirements "$@"
    shift $#
    ;;

  create )
    action="create"
    shift
    cli_volume_create_parse_requirements "$@"
    shift $#
    ;;

  ensure )
    action="ensure"
    shift
    cli_volume_ensure_parse_requirements "$@"
    shift $#
    ;;

  inspect )
    action="inspect"
    shift
    cli_volume_inspect_parse_requirements "$@"
    shift $#
    ;;

  export )
    action="export"
    shift
    cli_volume_export_parse_requirements "$@"
    shift $#
    ;;

  import )
    action="import"
    shift
    cli_volume_import_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  * )
    cli_volume_usage
    exit 1
    ;;

  esac
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_volume_destroy_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_volume_destroy_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="volume destroy"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_volume_create_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_volume_create_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="volume create"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_volume_ensure_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_volume_ensure_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="volume ensure"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_volume_inspect_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_volume_inspect_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="volume inspect"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_volume_export_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_volume_export_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="volume export"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_volume_import_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_volume_import_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="volume import"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_cat_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_cat_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="cat"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[path]+x} ]]; then
        # :argument.validations
        args[path]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_ls_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_ls_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="ls"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[path]+x} ]]; then
        # :argument.validations
        args[path]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
cli_tar_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    cli_tar_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="tar"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[cn]+x} ]]; then
        # :argument.validations
        args[cn]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[cn]+x} ]]; then
    printf "missing required argument: CN\nusage: cli tar CN\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh
  if [[ "$DEBUG" != "false" ]]; then
  #    echo
  #    inspect_args
      echo "-----"
      echo
  fi
}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "exec_bin" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_exec_bin_usage
    else
      cli_exec_bin_command
    fi

  elif [[ $action == "exec_bind" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_exec_bind_usage
    else
      cli_exec_bind_command
    fi

  elif [[ $action == "keycart" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_keycart_usage
    else
      cli_keycart_command
    fi

  elif [[ $action == "ovpn_run" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_ovpn_run_usage
    else
      cli_ovpn_run_command
    fi

  elif [[ $action == "build_ovpn" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_build_ovpn_usage
    else
      cli_build_ovpn_command
    fi

  elif [[ $action == "edit" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_edit_usage
    else
      cli_edit_command
    fi

  elif [[ $action == "env" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_env_usage
    else
      cli_env_command
    fi

  elif [[ $action == "provision" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_provision_usage
    else
      cli_provision_command
    fi

  elif [[ $action == "pki" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_pki_usage
    else
      cli_pki_command
    fi

  elif [[ $action == "pki regen" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_pki_regen_usage
    else
      cli_pki_regen_command
    fi

  elif [[ $action == "volume" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_volume_usage
    else
      cli_volume_command
    fi

  elif [[ $action == "volume destroy" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_volume_destroy_usage
    else
      cli_volume_destroy_command
    fi

  elif [[ $action == "volume create" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_volume_create_usage
    else
      cli_volume_create_command
    fi

  elif [[ $action == "volume ensure" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_volume_ensure_usage
    else
      cli_volume_ensure_command
    fi

  elif [[ $action == "volume inspect" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_volume_inspect_usage
    else
      cli_volume_inspect_command
    fi

  elif [[ $action == "volume export" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_volume_export_usage
    else
      cli_volume_export_command
    fi

  elif [[ $action == "volume import" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_volume_import_usage
    else
      cli_volume_import_command
    fi

  elif [[ $action == "cat" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_cat_usage
    else
      cli_cat_command
    fi

  elif [[ $action == "ls" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_ls_usage
    else
      cli_ls_command
    fi

  elif [[ $action == "tar" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      cli_tar_usage
    else
      cli_tar_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
